{"ast":null,"code":"import { configureStore, createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { API_KEY, TMDB_BASE_URL } from \"../utils/constants\";\nconst initialState = {\n  movies: [],\n  genresLoaded: false,\n  genres: []\n};\nexport const getGenres = createAsyncThunk(\"tmovies/genres\", async () => {\n  const {\n    data: {\n      genres\n    }\n  } = await axios.get(`${TMDB_BASE_URL}/genre/movie/list?api_key=${API_KEY}`);\n  // console.log(data);\n  return genres;\n});\nconst createArrayFromRawData = (array, moviesArray, genres) => {\n  // console.log(array);\n  array.forEach(movie => {\n    const movieGenres = [];\n    movie.genre_ids.forEach(genre => {\n      const name = genres.find(_ref => {\n        let {\n          id\n        } = _ref;\n        return id === genre;\n      });\n      if (name) movieGenres.push(name.name);\n    });\n    if (movie.backdrop_path) {\n      moviesArray.push({\n        id: movie.id,\n        name: movie !== null && movie !== void 0 && movie.original_name ? movie.original_name : movie.original_title,\n        image: movie.backdrop_path,\n        genres: movieGenres.slice(0, 3)\n      });\n    }\n  });\n};\nconst getRawData = async (api, genres, paging) => {\n  const moviesArray = [];\n  for (let i = 1; moviesArray.length < 60 && i < 10; i++) {\n    const {\n      data: {\n        results\n      }\n    } = await axios.get(`${api}${paging ? `&page=${i}` : \"\"}`);\n    createArrayFromRawData(results, moviesArray, genres);\n  }\n  // console.log({ moviesArray });\n  return moviesArray;\n};\nexport const fetchMovies = createAsyncThunk(\"tmovies/trending\", async (_ref2, thunkApi) => {\n  let {\n    type\n  } = _ref2;\n  const {\n    tmovies: {\n      genres\n    }\n  } = thunkApi.getState();\n  return getRawData(`${TMDB_BASE_URL}/trending/${type}/week?api_key=${API_KEY}`, genres, true);\n  // console.log(data);\n});\n\nexport const fetchDataByGenre = createAsyncThunk(\"tmovies/moviesByGenres\", async (_ref3, thunkApi) => {\n  let {\n    genre,\n    type\n  } = _ref3;\n  console.log(\"in fetch data\", genre, type);\n  const {\n    tmovies: {\n      genres\n    }\n  } = thunkApi.getState();\n  const data = getRawData(`${TMDB_BASE_URL}/discover/${type}?api_key=${API_KEY}&with_genres=${genre}`, genres);\n  console.log(data);\n  return data;\n});\nconst TmoviesSlice = createSlice({\n  name: \"Tmovies\",\n  initialState,\n  extraReducers: builder => {\n    builder.addCase(getGenres.fulfilled, (state, action) => {\n      state.genres = action.payload;\n      // state.genresLoaded = true;\n    });\n\n    builder.addCase(fetchMovies.fulfilled, (state, action) => {\n      state.movies = action.payload;\n    });\n    builder.addCase(fetchDataByGenre.fulfilled, (state, action) => {\n      state.movies = action.payload;\n    });\n  }\n});\nexport const store = configureStore({\n  reducer: {\n    tmovies: TmoviesSlice.reducer\n  }\n});\n\n// import {\n//     configureStore, \n//     createAsyncThunk, \n//     createSlice } \n//     from \"@reduxjs/toolkit\";\n// import axios from \"axios\";\n// import { API_KEY, TMDB_BASE_URL } from \"../utils/constants\";\n\n// const initialState = {\n//     movies: [],\n//     genresLoaded: false,\n//     genres: [],\n// };\n\n// export const getGenres = createAsyncThunk(\"tmovies/genres\", async()=> {\n//     const { data : {genres}, \n//     } = await axios.get(`${TMDB_BASE_URL}/genre/movie/list?api_key=${API_KEY}`\n//     );\n//     // console.log(data);\n//     return genres;\n// });\n\n// const createArrayFromRawData = (array, moviesArray,genres) => {\n//     // console.log(array);\n//     array.forEach((movie)=> {\n//         const movieGenres = [];\n//         movie.genre_ids.forEach((genre) => {\n//             const name = genres.find(({ id }) => id === genre);\n//             if(name) movieGenres.push(name.name);\n//         });\n//         if(movie.backdrop_path) {\n//             moviesArray.push({\n//                 id: movie.id,\n//                 name: movie?.original_name ? movie.original_name : movie.original_title,\n//                 image: movie.backdrop_path,\n//                 genres: movieGenres.slice(0, 3),\n//             });\n//         }\n//     });\n// };\n\n// const getRawData = async (api, genres, paging) => {\n//     const moviesArray = [];\n//     for(let i=1; moviesArray.length < 60 && i < 10; i++) {\n//         const {\n//             data: {results},\n//         } = await axios.get(\n//             `${api}${paging ? `&page=${i}` : \"\"}`\n//             );\n//             createArrayFromRawData(results,moviesArray,genres);\n//         }\n//         // console.log({ moviesArray });\n//         return moviesArray;\n// };\n\n// export const fetchMovies = createAsyncThunk(\"tmovies/trending\",\n// async ({ type }, thunkApi) => {\n//         const {\n//             tmovies: { genres },\n//         } = thunkApi.getState();\n//         return getRawData(\n//             `${TMDB_BASE_URL}/trending/${type}/week?api_key=${API_KEY}`,\n//             genres,\n//             true\n//         );\n//         // console.log(data);\n//     }\n// );\n\n// export const fetchDataByGenre = createAsyncThunk(\"tmovies/moviesByGenres\",\n// async ({genre, type }, thunkApi) => {\n//         console.log(\"in fetch data\", genre, type );\n//         const {\n//             tmovies: { genres },\n//         } = thunkApi.getState();\n//         const data = getRawData(\n//             `${TMDB_BASE_URL}/discover/${type}?api_key=${API_KEY}&with_genres=${genre}`,\n//             genres\n//         );\n//         console.log(data);\n//         return data;\n//     }\n// );\n\n// const TmoviesSlice = createSlice({\n//     name: \"Tmovies\",\n//     initialState,\n//     extraReducers:(builder) => {\n//         builder.addCase(getGenres.fulfilled,(state,action)=> {\n//             state.genres = action.payload;\n//             state.genresLoaded = true;\n//         });\n//         builder.addCase(fetchMovies.fulfilled,(state,action)=> {\n//             state.movies = action.payload;\n//         });\n//         builder.addCase(fetchDataByGenre.fulfilled,(state,action)=> {\n//             state.movies = action.payload;\n//         });\n//     },\n// });\n\n// export const store = configureStore({\n//     reducer: {\n//         tmovies: TmoviesSlice.reducer,\n//     },\n// });","map":{"version":3,"names":["configureStore","createAsyncThunk","createSlice","axios","API_KEY","TMDB_BASE_URL","initialState","movies","genresLoaded","genres","getGenres","data","get","createArrayFromRawData","array","moviesArray","forEach","movie","movieGenres","genre_ids","genre","name","find","id","push","backdrop_path","original_name","original_title","image","slice","getRawData","api","paging","i","length","results","fetchMovies","thunkApi","type","tmovies","getState","fetchDataByGenre","console","log","TmoviesSlice","extraReducers","builder","addCase","fulfilled","state","action","payload","store","reducer"],"sources":["/Users/plabs/Documents/putri/project_plabs/tmovies-ui/src/store/index.js"],"sourcesContent":["import {\n    configureStore, \n    createAsyncThunk, \n    createSlice } \n    from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { API_KEY, TMDB_BASE_URL } from \"../utils/constants\";\n\nconst initialState = {\n    movies: [],\n    genresLoaded: false,\n    genres: [],\n};\n\nexport const getGenres = createAsyncThunk(\"tmovies/genres\", async()=> {\n    const { data : {genres}, \n    } = await axios.get(`${TMDB_BASE_URL}/genre/movie/list?api_key=${API_KEY}`\n    );\n    // console.log(data);\n    return genres;\n});\n\nconst createArrayFromRawData = (array, moviesArray,genres) => {\n    // console.log(array);\n    array.forEach((movie)=> {\n        const movieGenres = [];\n        movie.genre_ids.forEach((genre) => {\n            const name = genres.find(({ id }) => id === genre);\n            if(name) movieGenres.push(name.name);\n        });\n        if(movie.backdrop_path) {\n            moviesArray.push({\n                id: movie.id,\n                name: movie?.original_name ? movie.original_name : movie.original_title,\n                image: movie.backdrop_path,\n                genres: movieGenres.slice(0, 3),\n            });\n        }\n    });\n};\n\nconst getRawData = async (api, genres, paging) => {\n    const moviesArray = [];\n    for(let i=1; moviesArray.length < 60 && i < 10; i++) {\n        const {\n            data: {results},\n        } = await axios.get(\n            `${api}${paging ? `&page=${i}` : \"\"}`\n            );\n            createArrayFromRawData(results,moviesArray,genres);\n        }\n        // console.log({ moviesArray });\n        return moviesArray;\n};\n\nexport const fetchMovies = createAsyncThunk(\"tmovies/trending\",\nasync ({ type }, thunkApi) => {\n        const {\n            tmovies: { genres },\n        } = thunkApi.getState();\n        return getRawData(\n            `${TMDB_BASE_URL}/trending/${type}/week?api_key=${API_KEY}`,\n            genres,\n            true\n        );\n        // console.log(data);\n    }\n);\n\nexport const fetchDataByGenre = createAsyncThunk(\"tmovies/moviesByGenres\",\nasync ({genre, type }, thunkApi) => {\n        console.log(\"in fetch data\", genre, type );\n        const {\n            tmovies: { genres },\n        } = thunkApi.getState();\n        const data = getRawData(\n            `${TMDB_BASE_URL}/discover/${type}?api_key=${API_KEY}&with_genres=${genre}`,\n            genres\n        );\n        console.log(data);\n        return data;\n    }\n);\n\n\nconst TmoviesSlice = createSlice({\n    name: \"Tmovies\",\n    initialState,\n    extraReducers:(builder) => {\n        builder.addCase(getGenres.fulfilled,(state,action)=> {\n            state.genres = action.payload;\n            // state.genresLoaded = true;\n        });\n        builder.addCase(fetchMovies.fulfilled,(state,action)=> {\n            state.movies = action.payload;\n        });\n        builder.addCase(fetchDataByGenre.fulfilled,(state,action)=> {\n            state.movies = action.payload;\n        });\n    },\n});\n\nexport const store = configureStore({\n    reducer: {\n        tmovies: TmoviesSlice.reducer,\n    },\n});\n\n\n\n\n\n\n\n// import {\n//     configureStore, \n//     createAsyncThunk, \n//     createSlice } \n//     from \"@reduxjs/toolkit\";\n// import axios from \"axios\";\n// import { API_KEY, TMDB_BASE_URL } from \"../utils/constants\";\n\n// const initialState = {\n//     movies: [],\n//     genresLoaded: false,\n//     genres: [],\n// };\n\n// export const getGenres = createAsyncThunk(\"tmovies/genres\", async()=> {\n//     const { data : {genres}, \n//     } = await axios.get(`${TMDB_BASE_URL}/genre/movie/list?api_key=${API_KEY}`\n//     );\n//     // console.log(data);\n//     return genres;\n// });\n\n// const createArrayFromRawData = (array, moviesArray,genres) => {\n//     // console.log(array);\n//     array.forEach((movie)=> {\n//         const movieGenres = [];\n//         movie.genre_ids.forEach((genre) => {\n//             const name = genres.find(({ id }) => id === genre);\n//             if(name) movieGenres.push(name.name);\n//         });\n//         if(movie.backdrop_path) {\n//             moviesArray.push({\n//                 id: movie.id,\n//                 name: movie?.original_name ? movie.original_name : movie.original_title,\n//                 image: movie.backdrop_path,\n//                 genres: movieGenres.slice(0, 3),\n//             });\n//         }\n//     });\n// };\n\n// const getRawData = async (api, genres, paging) => {\n//     const moviesArray = [];\n//     for(let i=1; moviesArray.length < 60 && i < 10; i++) {\n//         const {\n//             data: {results},\n//         } = await axios.get(\n//             `${api}${paging ? `&page=${i}` : \"\"}`\n//             );\n//             createArrayFromRawData(results,moviesArray,genres);\n//         }\n//         // console.log({ moviesArray });\n//         return moviesArray;\n// };\n\n// export const fetchMovies = createAsyncThunk(\"tmovies/trending\",\n// async ({ type }, thunkApi) => {\n//         const {\n//             tmovies: { genres },\n//         } = thunkApi.getState();\n//         return getRawData(\n//             `${TMDB_BASE_URL}/trending/${type}/week?api_key=${API_KEY}`,\n//             genres,\n//             true\n//         );\n//         // console.log(data);\n//     }\n// );\n\n// export const fetchDataByGenre = createAsyncThunk(\"tmovies/moviesByGenres\",\n// async ({genre, type }, thunkApi) => {\n//         console.log(\"in fetch data\", genre, type );\n//         const {\n//             tmovies: { genres },\n//         } = thunkApi.getState();\n//         const data = getRawData(\n//             `${TMDB_BASE_URL}/discover/${type}?api_key=${API_KEY}&with_genres=${genre}`,\n//             genres\n//         );\n//         console.log(data);\n//         return data;\n//     }\n// );\n\n\n// const TmoviesSlice = createSlice({\n//     name: \"Tmovies\",\n//     initialState,\n//     extraReducers:(builder) => {\n//         builder.addCase(getGenres.fulfilled,(state,action)=> {\n//             state.genres = action.payload;\n//             state.genresLoaded = true;\n//         });\n//         builder.addCase(fetchMovies.fulfilled,(state,action)=> {\n//             state.movies = action.payload;\n//         });\n//         builder.addCase(fetchDataByGenre.fulfilled,(state,action)=> {\n//             state.movies = action.payload;\n//         });\n//     },\n// });\n\n// export const store = configureStore({\n//     reducer: {\n//         tmovies: TmoviesSlice.reducer,\n//     },\n// });\n"],"mappings":"AAAA,SACIA,cAAc,EACdC,gBAAgB,EAChBC,WAAW,QACN,kBAAkB;AAC3B,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,EAAEC,aAAa,QAAQ,oBAAoB;AAE3D,MAAMC,YAAY,GAAG;EACjBC,MAAM,EAAE,EAAE;EACVC,YAAY,EAAE,KAAK;EACnBC,MAAM,EAAE;AACZ,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGT,gBAAgB,CAAC,gBAAgB,EAAE,YAAU;EAClE,MAAM;IAAEU,IAAI,EAAG;MAACF;IAAM;EACtB,CAAC,GAAG,MAAMN,KAAK,CAACS,GAAG,CAAE,GAAEP,aAAc,6BAA4BD,OAAQ,EAAC,CACzE;EACD;EACA,OAAOK,MAAM;AACjB,CAAC,CAAC;AAEF,MAAMI,sBAAsB,GAAG,CAACC,KAAK,EAAEC,WAAW,EAACN,MAAM,KAAK;EAC1D;EACAK,KAAK,CAACE,OAAO,CAAEC,KAAK,IAAI;IACpB,MAAMC,WAAW,GAAG,EAAE;IACtBD,KAAK,CAACE,SAAS,CAACH,OAAO,CAAEI,KAAK,IAAK;MAC/B,MAAMC,IAAI,GAAGZ,MAAM,CAACa,IAAI,CAAC;QAAA,IAAC;UAAEC;QAAG,CAAC;QAAA,OAAKA,EAAE,KAAKH,KAAK;MAAA,EAAC;MAClD,IAAGC,IAAI,EAAEH,WAAW,CAACM,IAAI,CAACH,IAAI,CAACA,IAAI,CAAC;IACxC,CAAC,CAAC;IACF,IAAGJ,KAAK,CAACQ,aAAa,EAAE;MACpBV,WAAW,CAACS,IAAI,CAAC;QACbD,EAAE,EAAEN,KAAK,CAACM,EAAE;QACZF,IAAI,EAAEJ,KAAK,aAALA,KAAK,eAALA,KAAK,CAAES,aAAa,GAAGT,KAAK,CAACS,aAAa,GAAGT,KAAK,CAACU,cAAc;QACvEC,KAAK,EAAEX,KAAK,CAACQ,aAAa;QAC1BhB,MAAM,EAAES,WAAW,CAACW,KAAK,CAAC,CAAC,EAAE,CAAC;MAClC,CAAC,CAAC;IACN;EACJ,CAAC,CAAC;AACN,CAAC;AAED,MAAMC,UAAU,GAAG,OAAOC,GAAG,EAAEtB,MAAM,EAAEuB,MAAM,KAAK;EAC9C,MAAMjB,WAAW,GAAG,EAAE;EACtB,KAAI,IAAIkB,CAAC,GAAC,CAAC,EAAElB,WAAW,CAACmB,MAAM,GAAG,EAAE,IAAID,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;IACjD,MAAM;MACFtB,IAAI,EAAE;QAACwB;MAAO;IAClB,CAAC,GAAG,MAAMhC,KAAK,CAACS,GAAG,CACd,GAAEmB,GAAI,GAAEC,MAAM,GAAI,SAAQC,CAAE,EAAC,GAAG,EAAG,EAAC,CACpC;IACDpB,sBAAsB,CAACsB,OAAO,EAACpB,WAAW,EAACN,MAAM,CAAC;EACtD;EACA;EACA,OAAOM,WAAW;AAC1B,CAAC;AAED,OAAO,MAAMqB,WAAW,GAAGnC,gBAAgB,CAAC,kBAAkB,EAC9D,cAAiBoC,QAAQ,KAAK;EAAA,IAAvB;IAAEC;EAAK,CAAC;EACP,MAAM;IACFC,OAAO,EAAE;MAAE9B;IAAO;EACtB,CAAC,GAAG4B,QAAQ,CAACG,QAAQ,EAAE;EACvB,OAAOV,UAAU,CACZ,GAAEzB,aAAc,aAAYiC,IAAK,iBAAgBlC,OAAQ,EAAC,EAC3DK,MAAM,EACN,IAAI,CACP;EACD;AACJ,CAAC,CACJ;;AAED,OAAO,MAAMgC,gBAAgB,GAAGxC,gBAAgB,CAAC,wBAAwB,EACzE,cAAuBoC,QAAQ,KAAK;EAAA,IAA7B;IAACjB,KAAK;IAAEkB;EAAK,CAAC;EACbI,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEvB,KAAK,EAAEkB,IAAI,CAAE;EAC1C,MAAM;IACFC,OAAO,EAAE;MAAE9B;IAAO;EACtB,CAAC,GAAG4B,QAAQ,CAACG,QAAQ,EAAE;EACvB,MAAM7B,IAAI,GAAGmB,UAAU,CAClB,GAAEzB,aAAc,aAAYiC,IAAK,YAAWlC,OAAQ,gBAAegB,KAAM,EAAC,EAC3EX,MAAM,CACT;EACDiC,OAAO,CAACC,GAAG,CAAChC,IAAI,CAAC;EACjB,OAAOA,IAAI;AACf,CAAC,CACJ;AAGD,MAAMiC,YAAY,GAAG1C,WAAW,CAAC;EAC7BmB,IAAI,EAAE,SAAS;EACff,YAAY;EACZuC,aAAa,EAAEC,OAAO,IAAK;IACvBA,OAAO,CAACC,OAAO,CAACrC,SAAS,CAACsC,SAAS,EAAC,CAACC,KAAK,EAACC,MAAM,KAAI;MACjDD,KAAK,CAACxC,MAAM,GAAGyC,MAAM,CAACC,OAAO;MAC7B;IACJ,CAAC,CAAC;;IACFL,OAAO,CAACC,OAAO,CAACX,WAAW,CAACY,SAAS,EAAC,CAACC,KAAK,EAACC,MAAM,KAAI;MACnDD,KAAK,CAAC1C,MAAM,GAAG2C,MAAM,CAACC,OAAO;IACjC,CAAC,CAAC;IACFL,OAAO,CAACC,OAAO,CAACN,gBAAgB,CAACO,SAAS,EAAC,CAACC,KAAK,EAACC,MAAM,KAAI;MACxDD,KAAK,CAAC1C,MAAM,GAAG2C,MAAM,CAACC,OAAO;IACjC,CAAC,CAAC;EACN;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMC,KAAK,GAAGpD,cAAc,CAAC;EAChCqD,OAAO,EAAE;IACLd,OAAO,EAAEK,YAAY,CAACS;EAC1B;AACJ,CAAC,CAAC;;AAQF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}